import os
import json
from flask import Flask, jsonify, request
from flask_cors import CORS
from openai import OpenAI

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import SessionLocal, SQLiteDB

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Flask(__name__)
CORS(app) # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

# --- –ú–æ–∫-–∫–ª–∏–µ–Ω—Ç OpenAI (—Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω) ---
try:
    class MockOpenAI:
        def __init__(self, *args, **kwargs):
            pass

        class MockChat:
            def __init__(self, *args, **kwargs):
                pass
            
            class MockCompletions:
                def create(self, *args, **kwargs):
                    class MockMessage:
                        def __init__(self, content):
                            self.content = content
                    
                    class MockChoice:
                        def __init__(self, message):
                            self.message = message

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–ª—å–Ω–æ–º—É API
                    return MockChoice(MockMessage('{\n  "response_type": "general_advice",\n  "data": {\n    "message": "–Ø ‚Äî –º–æ–∫-–æ—Ç–≤–µ—Ç –æ—Ç AI. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –∫–∞—Ä—å–µ—Ä–æ–π!"\n  }\n}'))

            @property
            def completions(self):
                return self.MockCompletions()

        @property
        def chat(self):
            return self.MockChat()
            
    client = MockOpenAI()
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–∫-–∫–ª–∏–µ–Ω—Ç OpenAI.")
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
    client = None

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ë–î ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---

@app.route('/api/register', methods=['POST'])
def register_user():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è Email –∏ –ø–∞—Ä–æ–ª—å"}), 400

    db_session = next(get_db())
    db = SQLiteDB(db_session)
    
    try:
        new_employee = db.create_employee(email, password)
        return jsonify({"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", "employee_id": new_employee.id}), 201
    except ValueError as e:
        return jsonify({"error": str(e)}), 409
    except Exception as e:
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}"}), 500

@app.route('/api/login', methods=['POST'])
def login_user():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è Email –∏ –ø–∞—Ä–æ–ª—å"}), 400

    db_session = next(get_db())
    db = SQLiteDB(db_session)

    employee = db.authenticate_employee(email, password)
    if employee:
        return jsonify({"message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", "employee_id": employee.id})
    else:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}), 401

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö ---

@app.route('/api/employee/<int:employee_id>', methods=['GET', 'POST'])
def handle_employee_data(employee_id):
    db_session = next(get_db())
    db = SQLiteDB(db_session)

    if request.method == 'GET':
        profile = db.get_employee_profile(employee_id)
        if not profile:
            return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        return jsonify(profile)

    if request.method == 'POST':
        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}), 400
        
        success = db.update_employee_profile(employee_id, data)
        if success:
            return jsonify({"message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"})
        else:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"}), 500

@app.route('/chat', methods=['POST'])
def chat_endpoint():
    data = request.get_json()
    user_query = data.get('query')
    employee_id = data.get('employee_id')

    if not user_query or not employee_id:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç query –∏–ª–∏ employee_id"}), 400

    db_session = next(get_db())
    db = SQLiteDB(db_session)

    profile = db.get_employee_profile(employee_id)
    if not profile:
        return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
    
    prompt = f"–¢—ã ‚Äî HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç... (–ó–∞–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {user_query})"
    try:
        completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "system", "content": prompt}])
        response_content = completion.message.content
        return jsonify(json.loads(response_content))
    except Exception as e:
        return jsonify({"response_type": "general_advice", "data": {"message": "AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."}})
