import os
import json
from flask import Flask, jsonify, request
from flask_cors import CORS
from openai import OpenAI

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import SessionLocal, SQLiteDB

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Flask(__name__)
CORS(app)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫) ---
try:
    class MockOpenAI:
        def __init__(self, *args, **kwargs): pass
        class MockChat:
            def __init__(self, *args, **kwargs): pass
            class MockCompletions:
                def create(self, *args, **kwargs):
                    class MockChoice:
                        def __init__(self, message): self.message = message
                    class MockMessage:
                        def __init__(self, content): self.content = content
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –º–æ–∫-–æ—Ç–≤–µ—Ç
                    return MockChoice(MockMessage('{\n  "response_type": "learning_recommendation",\n  "data": [\n    {\n      "course_name": "Advanced Python for Web",\n      "reason": "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –≤ FastAPI, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –≤ backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",\n      "relevance_score": 0.9\n    }\n  ]\n}'))
            @property
            def completions(self): return self.MockCompletions()
        @property
        def chat(self): return self.MockChat()
    client = MockOpenAI()
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–∫-–∫–ª–∏–µ–Ω—Ç OpenAI.")
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
    client = None

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ë–î ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- API Endpoints ---

@app.route('/api/employee/<int:employee_id>', methods=['GET', 'POST'])
def handle_employee_data(employee_id):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    db_session = next(get_db())
    db = SQLiteDB(db_session)

    if request.method == 'GET':
        profile = db.get_employee_profile(employee_id)
        if not profile:
            return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        return jsonify(profile)

    if request.method == 'POST': # –í script.js –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è POST, –∞ –Ω–µ PUT
        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}), 400
        
        success = db.update_employee_profile(employee_id, data)
        if success:
            return jsonify({"message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"})
        else:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"}), 500


@app.route('/chat', methods=['POST'])
def chat_endpoint():
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    if not client:
        return jsonify({"error": "AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}), 500

    data = request.get_json()
    user_query = data.get('query')
    employee_id = data.get('employee_id')

    if not user_query or not employee_id:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç query –∏–ª–∏ employee_id"}), 400

    db_session = next(get_db())
    db = SQLiteDB(db_session)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π, –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    profile = db.get_employee_profile(employee_id)
    if not profile:
        return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
    prompt = f"""
    –¢—ã ‚Äî HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç 'Career on Autopilot'. 
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏. 
    –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–Ø –°–û–¢–†–£–î–ù–ò–ö–ê:
    - –ò–º—è: {profile.get('name')}
    - –î–æ–ª–∂–Ω–æ—Å—Ç—å: {profile.get('role')}
    - –ù–∞–≤—ã–∫–∏: {json.dumps(profile.get('skills'), ensure_ascii=False)}
    - –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å: {json.dumps(profile.get('careerPath'), ensure_ascii=False)}
    - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–æ—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 10): {json.dumps(profile.get('interests'), ensure_ascii=False)}

    –ó–ê–ü–†–û–° –°–û–¢–†–£–î–ù–ò–ö–ê: "{user_query}"

    –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
    –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –∑–∞–ø—Ä–æ—Å–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏. 
    –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤ (`response_type`):
    1. `learning_recommendation`: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é (–∫—É—Ä—Å—ã, —Å—Ç–∞—Ç—å–∏).
    2. `project_recommendation`: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∏—é –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
    3. `profile_improvement`: –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –Ω–∞–≤—ã–∫–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ DevOps").
    4. `general_advice`: –û–±—â–∏–π —Å–æ–≤–µ—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ.

    –°–¢–†–û–ì–û –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Ñ–æ—Ä–º–∞—Ç–∞ JSON. –ü—Ä–∏–º–µ—Ä:
    {{ "response_type": "learning_recommendation", "data": [{{ "course_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", "reason": "–ü–æ—á–µ–º—É —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "relevance_score": 0.9 }}] }}
    """

    try:
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}]
        )
        response_content = completion.message.content
        # –£–±–∏—Ä–∞–µ–º Markdown-–æ–±–µ—Ä—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if response_content.startswith("```json"): 
            response_content = response_content[7:-4]

        return jsonify(json.loads(response_content))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return jsonify({
            "response_type": "general_advice",
            "data": {"message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."}
        })

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ, –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
# /api/employees/search –∏ /api/technologies
