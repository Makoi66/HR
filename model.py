import os
import json
from flask import Flask, jsonify, request
from flask_cors import CORS
from openai import OpenAI

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import SessionLocal, SQLiteDB

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Flask(__name__)
CORS(app) # –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∫–ª–∏–µ–Ω—Ç–∞ ---
try:
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à API –∫–ª—é—á
    # open_api_key = os.environ.get("OPENAI_API_KEY")
    # client = OpenAI(api_key=open_api_key)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    class MockOpenAI:
        def __init__(self, *args, **kwargs):
            pass
        class MockChat:
            def __init__(self, *args, **kwargs):
                pass
            class MockCompletions:
                def create(self, *args, **kwargs):
                    class MockChoice:
                        def __init__(self, message):
                            self.message = message
                    class MockMessage:
                        def __init__(self, content):
                            self.content = content
                    return MockChoice(MockMessage('{\n  "response_type": "learning_recommendation",\n  "data": [\n    {\n      "course_name": "Advanced Python for Web",\n      "reason": "–î–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –≤ FastAPI –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",\n      "relevance_score": 0.9\n    },\n    {\n      "course_name": "DevOps Essentials: Docker & Kubernetes",\n      "reason": "–ù–∞–≤—ã–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ CI/CD –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å—è—Ç –≤–∞—à—É —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.",\n      "relevance_score": 0.8\n    }\n  ]\n}'))
            @property
            def completions(self):
                return self.MockCompletions()
        @property
        def chat(self):
            return self.MockChat()
    client = MockOpenAI()
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–∫-–∫–ª–∏–µ–Ω—Ç OpenAI.")

except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
    client = None

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ë–î ---

def get_db():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- API Endpoints ---

@app.route('/chat', methods=['POST'])
def chat_endpoint():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    if not client:
        return jsonify({"error": "AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}), 500

    data = request.get_json()
    user_query = data.get('query')
    employee_id = data.get('employee_id')

    if not user_query or not employee_id:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç query –∏–ª–∏ employee_id"}), 400

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db_session = next(get_db())
    db = SQLiteDB(db_session)

    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –¥–ª—è AI
    summary = db.get_employee_summary(employee_id)
    skills = db.get_employee_skills(employee_id)
    projects = db.get_employee_projects(employee_id)

    prompt = f"""
    –¢—ã ‚Äî HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É 'Career on Autopilot'. 
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ –∏—Ö –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏. 
    –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    
    –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –∫ —Ç–µ–±–µ –æ–±—Ä–∞—Ç–∏–ª—Å—è:
    - –ò–º—è: {summary.get('name')}
    - –î–æ–ª–∂–Ω–æ—Å—Ç—å: {summary.get('position')}, –£—Ä–æ–≤–µ–Ω—å: {summary.get('level')}
    - –û–ø—ã—Ç: {summary.get('experience_years')} –ª–µ—Ç
    - –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (hard skills): {skills.get('hard_skills')}
    - Soft skills: {skills.get('soft_skills')}
    - –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö: {[p['name'] for p in projects]}

    –ó–∞–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: "{user_query}"

    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏. 
    –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤ (response_type):
    1. `learning_recommendation`: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é (–∫—É—Ä—Å—ã, —Å—Ç–∞—Ç—å–∏, –∫–Ω–∏–≥–∏).
    2. `project_recommendation`: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∏—é –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
    3. `profile_improvement`: –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    4. `general_advice`: –û–±—â–∏–π —Å–æ–≤–µ—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ.

    –ü—Ä–∏–º–µ—Ä JSON –æ—Ç–≤–µ—Ç–∞:
    {{ "response_type": "learning_recommendation", "data": [{{ "course_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", "reason": "–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∫—É—Ä—Å –ø–æ–ª–µ–∑–µ–Ω", "relevance_score": 0.9 }}] }}

    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """

    try:
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": prompt}
            ]
        )
        response_content = completion.message.content
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ Markdown-–æ–±–µ—Ä—Ç–∫–∏
        if response_content.startswith("```json"): 
            response_content = response_content[7:-4]

        return jsonify(json.loads(response_content))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return jsonify({
            "response_type": "general_advice",
            "data": {
                "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
            }
        })


@app.route('/api/employee/<int:employee_id>', methods=['GET'])
def get_employee_data(employee_id):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ."""
    db_session = next(get_db())
    db = SQLiteDB(db_session)
    
    profile = db.get_employee_profile(employee_id)
    if not profile:
        return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
    completeness = db.check_profile_completeness(employee_id)
    profile["profile_completeness"] = completeness
    
    return jsonify(profile)


@app.route('/api/employees/search', methods=['POST'])
def search_employees():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º."""
    criteria = request.get_json()
    if not criteria:
        return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"}), 400

    db_session = next(get_db())
    db = SQLiteDB(db_session)

    employee_ids = db.filter_employees_by_criteria(criteria)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    results = [db.get_employee_profile(emp_id) for emp_id in employee_ids]
    
    return jsonify(results)


# –ü—Ä–∏–º–µ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π (–¥–ª—è UI)
@app.route('/api/technologies', methods=['GET'])
def get_technologies():
    db_session = next(get_db())
    db = SQLiteDB(db_session)
    category = request.args.get('category')
    techs = db.get_available_technologies(category)
    return jsonify(techs)
